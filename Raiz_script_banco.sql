-- MySQL Script generated by MySQL Workbench
-- Thu Oct 16 11:02:00 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema new_schema1
-- -----------------------------------------------------
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`endereco` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `cep` VARCHAR(10) NOT NULL,
  `logradouro` VARCHAR(200) NULL,
  `Bairro` VARCHAR(200) NULL,
  `cidade` VARCHAR(100) NULL,
  `uf` VARCHAR(2) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`municipio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`municipio` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NULL,
  `cnpj` VARCHAR(20) NULL,
  `endereco_Id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_Id` ASC) VISIBLE,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_Id`)
    REFERENCES `mydb`.`endereco` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`armazem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`armazem` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NULL,
  `endereco_id` INT NULL,
  `municipio_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_municipio_id_idx` (`municipio_id` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_id` ASC) VISIBLE,
  CONSTRAINT `FK_municipio_id`
    FOREIGN KEY (`municipio_id`)
    REFERENCES `mydb`.`municipio` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `mydb`.`endereco` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`perfil_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`perfil_usuario` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NULL,
  `descricao` VARCHAR(100) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`usuario` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  `login` VARCHAR(100) NULL,
  `senha` VARCHAR(45) NULL,
  `telefone` VARCHAR(45) NULL,
  `cpf` VARCHAR(20) NULL,
  `cnpj` VARCHAR(20) NULL,
  `endereco_id` INT NULL,
  `perfil_id` INT NULL,
  `data_cadastro` DATETIME NULL,
  `ativo` TINYINT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_usuario_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `login_UNIQUE` (`login` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_id` ASC) VISIBLE,
  INDEX `FK_perfil_id_idx` (`perfil_id` ASC) VISIBLE,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `mydb`.`endereco` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_perfil_id`
    FOREIGN KEY (`perfil_id`)
    REFERENCES `mydb`.`perfil_usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`especies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`especies` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome_cientifico` VARCHAR(45) NULL,
  `nome_popular` VARCHAR(45) NULL,
  `categoria` VARCHAR(45) NULL,
  `safra` DATE NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_especies_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`lote`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`lote` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `usuario_id` INT NULL,
  `quantidade` INT NULL,
  `peso` VARCHAR(45) NULL,
  `especie_id` INT NULL,
  `fornecedor_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_usuario_id_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `FK_especie_id_idx` (`especie_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_especie_id`
    FOREIGN KEY (`especie_id`)
    REFERENCES `mydb`.`especies` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`estoque` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `lote_id` INT NULL,
  `armazem_id` INT NULL,
  `quantidade_disponivel` INT NULL,
  `especie_id` INT NULL,
  `data_ultima_atualizacao` DATE NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_lote_id_idx` (`lote_id` ASC) VISIBLE,
  INDEX `FK_armazem_id_idx` (`armazem_id` ASC) VISIBLE,
  INDEX `FK_especie_id_idx` (`especie_id` ASC) VISIBLE,
  CONSTRAINT `FK_lote_id`
    FOREIGN KEY (`lote_id`)
    REFERENCES `mydb`.`lote` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_armazem_id`
    FOREIGN KEY (`armazem_id`)
    REFERENCES `mydb`.`armazem` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_especie_id`
    FOREIGN KEY (`especie_id`)
    REFERENCES `mydb`.`especies` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`status` (
  `id` INT NOT NULL,
  `status` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`fornecedor` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(100) NULL,
  `usuario_id` INT NULL,
  `endereco_id` INT NULL,
  `lote_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_usuario_id_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_id` ASC) VISIBLE,
  INDEX `FK_lote_id_idx` (`lote_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `mydb`.`endereco` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_lote_id`
    FOREIGN KEY (`lote_id`)
    REFERENCES `mydb`.`lote` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`pedido` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `status_id` INT NULL,
  `fornecedor_id` INT NULL,
  `item_id` INT NULL,
  `usuario_id` INT NULL,
  `data_criacao` DATE NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_status_id_idx` (`status_id` ASC) VISIBLE,
  INDEX `FK_item_id_idx` (`item_id` ASC) VISIBLE,
  INDEX `FK_usuario_id_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `FK_fornecedor_id_idx` (`fornecedor_id` ASC) VISIBLE,
  CONSTRAINT `FK_status_id`
    FOREIGN KEY (`status_id`)
    REFERENCES `mydb`.`status` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_item_id`
    FOREIGN KEY (`item_id`)
    REFERENCES `mydb`.`item_pedido` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_fornecedor_id`
    FOREIGN KEY (`fornecedor_id`)
    REFERENCES `mydb`.`fornecedor` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`item_pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`item_pedido` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `pedido_id` INT NULL,
  `quantidade` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_pedido_id_idx` (`pedido_id` ASC) VISIBLE,
  CONSTRAINT `FK_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `mydb`.`pedido` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`entrega`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`entrega` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `item_id` INT NULL,
  `data_entrega` DATE NULL,
  `status_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_Entrega_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_item_id_idx` (`item_id` ASC) VISIBLE,
  INDEX `FK_status_id_idx` (`status_id` ASC) VISIBLE,
  CONSTRAINT `FK_item_id`
    FOREIGN KEY (`item_id`)
    REFERENCES `mydb`.`item_pedido` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_status_id`
    FOREIGN KEY (`status_id`)
    REFERENCES `mydb`.`status` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`destinatario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`destinatario` (
  `id` INT NOT NULL,
  `usuario_id` INT NULL,
  `endereco_id` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_usuario_id_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `mydb`.`endereco` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`estoque_lote`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`estoque_lote` (
  `estoque_id` INT NOT NULL,
  `lote_id` INT NOT NULL,
  PRIMARY KEY (`estoque_id`, `lote_id`),
  INDEX `FK_lote_id_idx` (`lote_id` ASC) VISIBLE,
  CONSTRAINT `FK_estoque_id`
    FOREIGN KEY (`estoque_id`)
    REFERENCES `mydb`.`estoque` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_lote_id`
    FOREIGN KEY (`lote_id`)
    REFERENCES `mydb`.`lote` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`log`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`log` (
  `usuario_id` INT NOT NULL,
  `tipo_operacao` VARCHAR(100) NULL,
  `desc` VARCHAR(100) NULL,
  PRIMARY KEY (`usuario_id`),
  UNIQUE INDEX `usuario_id_UNIQUE` (`usuario_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`lote_pedido`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`lote_pedido` (
  `lote_id` INT NOT NULL,
  `pedido_id` INT NOT NULL,
  PRIMARY KEY (`lote_id`, `pedido_id`),
  INDEX `FK_pedido_id_idx` (`pedido_id` ASC) VISIBLE,
  CONSTRAINT `FK_lote_id`
    FOREIGN KEY (`lote_id`)
    REFERENCES `mydb`.`lote` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_pedido_id`
    FOREIGN KEY (`pedido_id`)
    REFERENCES `mydb`.`pedido` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_total_por_especie`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_total_por_especie` (`especie` INT, `total_distribuido` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_total_por_municipio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_total_por_municipio` (`municipio` INT, `total_distribuido` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_historico_lote`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_historico_lote` (`lote_id` INT, `especie` INT, `tipo` INT, `quantidade` INT, `municipio` INT, `data_evento` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_entregas_transparencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_entregas_transparencia` (`municipio` INT, `endereco` INT, `data_entrega` INT, `especie` INT, `status` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_fornecedores_entregas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_fornecedores_entregas` (`fornecedor` INT, `municipio` INT, `entregas_realizadas` INT, `total_quantidade` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_status_entregas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_status_entregas` (`status` INT, `total` INT);

-- -----------------------------------------------------
-- procedure criar_ordem_expedicao
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE criar_ordem_expedicao (
    IN p_usuario_id INT,
    IN p_status_id INT,
    IN p_data DATE,
    IN p_veiculo VARCHAR(100)
)
BEGIN
    INSERT INTO ordem_expedicao (usuario_id, status_id, data_criacao)
    VALUES (p_usuario_id, p_status_id, p_data);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrar_entrega
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE registrar_entrega (
    IN p_item_id INT,
    IN p_status_id INT,
    IN p_data DATE
)
BEGIN
IF p_data > CURDATE() THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: data de entrega não pode ser futura.';
    END IF;
    
    INSERT INTO entrega (item_id, data_entrega, status_id)
    VALUES (p_item_id, p_data, p_status_id);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure criar_pedido
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE criar_pedido (
    IN p_usuario_id INT,
	IN p_data DATE,
    IN p_status_id INT
)
BEGIN
    -- Insere um novo pedido
    INSERT INTO pedido (usuario_id, status_id, data_criacao)
    VALUES (p_usuario_id, p_status_id, p_data);

    -- Retorna o ID do pedido recém-criado
    SELECT LAST_INSERT_ID() AS novo_pedido_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure atualizar_status_entrega
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE atualizar_status_entrega (
    IN p_entrega_id INT,
    IN p_novo_status_id INT
)
BEGIN
    DECLARE v_count INT;

    -- Verifica se a entrega existe
    SELECT COUNT(*) INTO v_count FROM entrega WHERE id = p_entrega_id;
    IF v_count = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Erro: entrega não encontrada.';
    END IF;

    -- Verifica se o status existe
    SELECT COUNT(*) INTO v_count FROM status WHERE id = p_novo_status_id;
    IF v_count = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Erro: status não encontrado.';
    END IF;

    -- Atualiza status
    UPDATE entrega SET status_id = p_novo_status_id
    WHERE id = p_entrega_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure consultar_entregas_pedido
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE consultar_entregas_pedido (
    IN p_pedido_id INT
)
BEGIN
    SELECT e.id AS entrega_id, e.data_entrega, s.status, i.quantidade
    FROM entrega e
    JOIN status s ON e.status_id = s.id
    JOIN item_pedido i ON e.item_id = i.id
    WHERE i.pedido_id = p_pedido_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mydb`.`vw_total_por_especie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_total_por_especie`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_total_por_especie AS
SELECT e.nome_popular AS especie,
       SUM(it.quantidade) AS total_distribuido
FROM item_pedido it
JOIN pedido pd ON pd.id = it.pedido_id
JOIN estoque es ON es.id = it.estoque_id
JOIN especies e ON e.id = es.especie_id
GROUP BY e.nome_popular;

-- -----------------------------------------------------
-- View `mydb`.`vw_total_por_municipio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_total_por_municipio`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_total_por_municipio AS
SELECT 
    m.nome AS municipio,
    SUM(it.quantidade) AS total_distribuido
FROM entrega en
JOIN item_pedido it ON it.id = en.item_id
JOIN pedido pd ON pd.id = it.pedido_id
JOIN usuario u ON u.id = pd.usuario_id
JOIN endereco e ON e.id = u.endereco_id
JOIN municipio m ON m.id = e.municipio_id
GROUP BY m.nome;

-- -----------------------------------------------------
-- View `mydb`.`vw_historico_lote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_historico_lote`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_historico_lote AS
SELECT l.id AS lote_id,
       e.nome_popular AS especie,
       'ENTRADA' AS tipo,
       l.quantidade,
       NULL AS municipio,
       NULL AS data_evento
FROM lote l
JOIN especies e ON e.id = l.especie_id

UNION ALL

SELECT l.id AS lote_id,
       e.nome_popular AS especie,
       'SAIDA' AS tipo,
       it.quantidade,
       m.nome AS municipio,
       pd.data_criacao AS data_evento
FROM lote l
JOIN especies e ON e.id = l.especie_id
JOIN pedido pd ON p.lote_id = l.Id
JOIN item_pedido it ON it.id = p.item_id
JOIN municipio m ON m.id = pd.usuario_id;

-- -----------------------------------------------------
-- View `mydb`.`vw_entregas_transparencia`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_entregas_transparencia`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_entregas_transparencia AS
SELECT 
    m.nome AS municipio,
    eend.logradouro AS endereco,
    DATE_FORMAT(en.data_entrega, '%d %b %Y') AS data_entrega,
    esp.nome_popular AS especie,
    s.status AS status
FROM entrega en
JOIN item_pedido ip ON en.item_id = ip.id
JOIN pedido p ON ip.pedido_id = p.id
JOIN fornecedor f ON p.fornecedor_id = f.id
JOIN endereco eend ON f.endereco_id = eend.id
JOIN municipio m ON eend.id = m.endereco_id
JOIN especies esp ON esp.id = (
    SELECT l.especie_id 
    FROM lote_pedido lp 
    JOIN lote l ON lp.lote_id = l.id 
    WHERE lp.pedido_id = p.id 
    LIMIT 1
)
JOIN status s ON en.status_id = s.id;

-- -----------------------------------------------------
-- View `mydb`.`vw_fornecedores_entregas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_fornecedores_entregas`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_fornecedores_entregas AS
SELECT 
    f.nome AS fornecedor,
    m.nome AS municipio,
    COUNT(en.id) AS entregas_realizadas,
    SUM(ip.quantidade) AS total_quantidade
FROM entrega en
JOIN item_pedido ip ON en.item_id = ip.id
JOIN pedido p ON ip.pedido_id = p.id
JOIN fornecedor f ON p.fornecedor_id = f.id
JOIN endereco eend ON f.endereco_id = eend.id
JOIN municipio m ON eend.id = m.endereco_id
GROUP BY f.nome, m.nome;

-- -----------------------------------------------------
-- View `mydb`.`vw_status_entregas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_status_entregas`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_status_entregas AS
SELECT 
    s.status,
    COUNT(en.id) AS total
FROM entrega en
JOIN status s ON en.status_id = s.id
GROUP BY s.status;
USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`usuario_BEFORE_INSERT` BEFORE INSERT ON `usuario` 
FOR EACH ROW
BEGIN
IF (NEW.CPF IS NULL AND NEW.CNPJ IS NULL)
       OR (NEW.CPF IS NOT NULL AND NEW.CNPJ IS NOT NULL) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Informe apenas CPF ou CNPJ (nunca ambos ou nenhum).';
    END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`usuario_BEFORE_UPDATE` BEFORE UPDATE ON `usuario` FOR EACH ROW
BEGIN
   IF (NEW.CPF IS NULL AND NEW.CNPJ IS NULL)
      OR (NEW.CPF IS NOT NULL AND NEW.CNPJ IS NOT NULL) THEN
      SIGNAL SQLSTATE '45000'
      SET MESSAGE_TEXT = 'Informe apenas CPF ou CNPJ (nunca ambos ou nenhum).';
   END IF;
END;$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`estoque_BEFORE_UPDATE` BEFORE UPDATE ON `estoque` FOR EACH ROW
BEGIN
IF NEW.quantidade_disponivel < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: saldo de estoque não pode ser negativo';
    END IF;
END$$

USE `mydb`$$
CREATE TRIGGER pedido_BEFORE_UPDATE
BEFORE UPDATE ON pedido
FOR EACH ROW
BEGIN
   IF NEW.status = 'Finalizado' THEN
      IF (SELECT COUNT(*) FROM item_pedido WHERE pedido_id = NEW.id) = 0 THEN
         SIGNAL SQLSTATE '45000'
         SET MESSAGE_TEXT = 'Não é possível finalizar um pedido sem itens.';
      END IF;
   END IF;
END;$$

USE `mydb`$$
CREATE TRIGGER entrega_AFTER_INSERT
AFTER INSERT ON entrega
FOR EACH ROW
BEGIN
   UPDATE estoque
   SET quantidade = quantidade - NEW.quantidade
   WHERE id = NEW.estoque_id;
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
