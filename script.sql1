-- MySQL Script generated by MySQL Workbench
-- Fri Sep 26 10:28:07 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema new_schema1
-- -----------------------------------------------------
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`armazem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`armazem` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(45) NULL,
  `endereco_id` INT NULL,
  `municipio_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`endereco`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`endereco` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `CEP` VARCHAR(9) NOT NULL,
  `Logradouro` VARCHAR(100) NULL,
  `Bairro` VARCHAR(100) NULL,
  `Cidade` VARCHAR(100) NULL,
  `Uf` VARCHAR(2) NULL,
  PRIMARY KEY (`Id`),
  UNIQUE INDEX `Id_UNIQUE` (`Id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`perfil_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`perfil_usuario` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NULL,
  `descricao` TEXT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`usuario` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NOT NULL,
  `login` VARCHAR(100) NULL,
  `senha` VARCHAR(45) NULL,
  `telefone` VARCHAR(45) NULL,
  `CPF` VARCHAR(45) NULL,
  `CNPJ` VARCHAR(45) NULL,
  `endereco_id` INT NULL,
  `perfil_id` INT NULL,
  `data_cadastro` DATETIME NULL,
  `ativo` TINYINT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_usuario_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `login_UNIQUE` (`login` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_id` ASC) VISIBLE,
  INDEX `FK_perfil_id_idx` (`perfil_id` ASC) VISIBLE,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `mydb`.`endereco` (`Id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_perfil_id`
    FOREIGN KEY (`perfil_id`)
    REFERENCES `mydb`.`perfil_usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`especies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`especies` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome_cientifico` VARCHAR(45) NULL,
  `nome_popular` VARCHAR(45) NULL,
  `categoria` VARCHAR(45) NULL,
  `safra` DATE NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `Id_especies_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`lote`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`lote` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `usuarior_id` INT NULL,
  `quantidade` INT NULL,
  `peso` VARCHAR(45) NULL,
  `especie_id` INT NULL,
  `fornecedor_id` INT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE INDEX `Id_UNIQUE` (`Id` ASC) VISIBLE,
  INDEX `FK_usuario_id_idx` (`usuarior_id` ASC) VISIBLE,
  INDEX `FK_especie_id_idx` (`especie_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuarior_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_especie_id`
    FOREIGN KEY (`especie_id`)
    REFERENCES `mydb`.`especies` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`estoque`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`estoque` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `lote_id` INT NULL,
  `armazem_id` INT NULL,
  `quantidade_disponivel` INT NULL,
  `especie_id` INT NULL,
  `data_ultima_atualizacao` DATE NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_lote_id_idx` (`lote_id` ASC) VISIBLE,
  INDEX `FK_armazem_id_idx` (`armazem_id` ASC) VISIBLE,
  INDEX `FK_especie_id_idx` (`especie_id` ASC) VISIBLE,
  CONSTRAINT `FK_lote_id`
    FOREIGN KEY (`lote_id`)
    REFERENCES `mydb`.`lote` (`Id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_armazem_id`
    FOREIGN KEY (`armazem_id`)
    REFERENCES `mydb`.`armazem` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_especie_id`
    FOREIGN KEY (`especie_id`)
    REFERENCES `mydb`.`especies` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`municipio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`municipio` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(45) NULL,
  `CNPJ` INT NULL,
  `endereco_Id` INT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE INDEX `Id_UNIQUE` (`Id` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_Id` ASC) VISIBLE,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_Id`)
    REFERENCES `mydb`.`endereco` (`Id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`status`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`status` (
  `id` INT NOT NULL,
  `status` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ordem_expedicao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ordem_expedicao` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `data_criacao` DATE NULL,
  `status_id` INT NULL,
  `usuario_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_usuario_id_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `FK_status_id_idx` (`status_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_status_id`
    FOREIGN KEY (`status_id`)
    REFERENCES `mydb`.`status` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`item_expedicao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`item_expedicao` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ordem_id` INT NULL,
  `quantidade` VARCHAR(45) NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_ordem_id_idx` (`ordem_id` ASC) VISIBLE,
  CONSTRAINT `FK_ordem_id`
    FOREIGN KEY (`ordem_id`)
    REFERENCES `mydb`.`ordem_expedicao` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`entrega`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`entrega` (
  `Id_Entrega` INT NOT NULL AUTO_INCREMENT,
  `item_id` INT NULL,
  `data_entrega` DATE NULL,
  `status_id` INT NULL,
  PRIMARY KEY (`Id_Entrega`),
  UNIQUE INDEX `Id_Entrega_UNIQUE` (`Id_Entrega` ASC) VISIBLE,
  INDEX `FK_item_id_idx` (`item_id` ASC) VISIBLE,
  INDEX `FK_status_id_idx` (`status_id` ASC) VISIBLE,
  CONSTRAINT `FK_item_id`
    FOREIGN KEY (`item_id`)
    REFERENCES `mydb`.`item_expedicao` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_status_id`
    FOREIGN KEY (`status_id`)
    REFERENCES `mydb`.`status` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`destinatario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`destinatario` (
  `id` INT NOT NULL,
  `usuario_id` INT NULL,
  `endereco_id` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `FK_usuario_id_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `mydb`.`endereco` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`pedidos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`pedidos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `status_id` INT NULL,
  `fornecedor_id` INT NULL,
  `lote_id` INT NULL,
  `ordem_id` INT NULL,
  `item_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_status_id_idx` (`status_id` ASC) VISIBLE,
  INDEX `FK_lote_id_idx` (`lote_id` ASC) VISIBLE,
  INDEX `FK_ordem_id_idx` (`ordem_id` ASC) VISIBLE,
  INDEX `FK_item_id_idx` (`item_id` ASC) VISIBLE,
  CONSTRAINT `FK_status_id`
    FOREIGN KEY (`status_id`)
    REFERENCES `mydb`.`status` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_lote_id`
    FOREIGN KEY (`lote_id`)
    REFERENCES `mydb`.`lote` (`Id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_ordem_id`
    FOREIGN KEY (`ordem_id`)
    REFERENCES `mydb`.`ordem_expedicao` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_item_id`
    FOREIGN KEY (`item_id`)
    REFERENCES `mydb`.`item_expedicao` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`fornecedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`fornecedor` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(45) NULL,
  `usuario_id` INT NULL,
  `endereco_id` INT NULL,
  `lote_id` INT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `FK_usuario_id_idx` (`usuario_id` ASC) VISIBLE,
  INDEX `FK_endereco_id_idx` (`endereco_id` ASC) VISIBLE,
  INDEX `FK_lote_id_idx` (`lote_id` ASC) VISIBLE,
  CONSTRAINT `FK_usuario_id`
    FOREIGN KEY (`usuario_id`)
    REFERENCES `mydb`.`usuario` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_endereco_id`
    FOREIGN KEY (`endereco_id`)
    REFERENCES `mydb`.`endereco` (`Id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FK_lote_id`
    FOREIGN KEY (`lote_id`)
    REFERENCES `mydb`.`lote` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_total_por_especie`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_total_por_especie` (`especie` INT, `total_distribuido` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_total_por_municipio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_total_por_municipio` (`municipio` INT, `total_distribuido` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`vw_historico_lote`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vw_historico_lote` (`lote_id` INT, `especie` INT, `tipo` INT, `quantidade` INT, `municipio` INT, `data_evento` INT);

-- -----------------------------------------------------
-- procedure criar_ordem_expedicao
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE criar_ordem_expedicao (
    IN p_usuario_id INT,
    IN p_status_id INT,
    IN p_data DATE,
    IN p_veiculo VARCHAR(100)
)
BEGIN
    INSERT INTO ordem_expedicao (usuario_id, status_id, data_criacao)
    VALUES (p_usuario_id, p_status_id, p_data);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure registrar_entrega
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE registrar_entrega (
    IN p_item_id INT,
    IN p_status_id INT,
    IN p_data DATE
)
BEGIN
    INSERT INTO entrega (item_id, status_id, data_entrega)
    VALUES (p_item_id, p_status_id, p_data);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `mydb`.`vw_total_por_especie`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_total_por_especie`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_total_por_especie AS
SELECT e.nome_cientifico AS especie,
       SUM(it.quantidade) AS total_distribuido
FROM item_expedicao it
JOIN ordem_expedicao oe ON oe.id = it.ordem_id
JOIN estoque es ON es.id = oe.id
JOIN especies e ON e.id = es.especie_id
GROUP BY e.nome_cientifico;

-- -----------------------------------------------------
-- View `mydb`.`vw_total_por_municipio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_total_por_municipio`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_total_por_municipio AS
SELECT m.Nome AS municipio,
       SUM(it.quantidade) AS total_distribuido
FROM entrega en
JOIN item_expedicao it ON it.id = en.item_id
JOIN ordem_expedicao oe ON oe.id = it.ordem_id
JOIN municipio m ON m.Id = oe.usuario_id  -- ajustar se chave for diferente
GROUP BY m.Nome;

-- -----------------------------------------------------
-- View `mydb`.`vw_historico_lote`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`vw_historico_lote`;
USE `mydb`;
CREATE OR REPLACE VIEW vw_historico_lote AS
SELECT l.Id AS lote_id,
       e.nome_cientifico AS especie,
       'ENTRADA' AS tipo,
       l.quantidade,
       NULL AS municipio,
       NULL AS data_evento
FROM lote l
JOIN especies e ON e.id = l.especie_id

UNION ALL

SELECT l.Id AS lote_id,
       e.nome_cientifico AS especie,
       'SAIDA' AS tipo,
       it.quantidade,
       m.Nome AS municipio,
       oe.data_criacao AS data_evento
FROM lote l
JOIN especies e ON e.id = l.especie_id
JOIN pedidos p ON p.lote_id = l.Id
JOIN ordem_expedicao oe ON oe.id = p.ordem_id
JOIN item_expedicao it ON it.id = p.item_id
JOIN municipio m ON m.Id = oe.usuario_id;
USE `mydb`;

DELIMITER $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`trg_valida_cpf_cnpj_usuario` BEFORE INSERT ON `usuario` 
FOR EACH ROW
BEGIN
IF (NEW.CPF IS NULL AND NEW.CNPJ IS NULL)
       OR (NEW.CPF IS NOT NULL AND NEW.CNPJ IS NOT NULL) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Informe apenas CPF ou CNPJ (nunca ambos ou nenhum).';
    END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`trg_valida_cpf_cnpj_usuario_upd` BEFORE INSERT ON `usuario` 
FOR EACH ROW
BEGIN
 IF (NEW.CPF IS NULL AND NEW.CNPJ IS NULL)
       OR (NEW.CPF IS NOT NULL AND NEW.CNPJ IS NOT NULL) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Informe apenas CPF ou CNPJ (nunca ambos ou nenhum).';
    END IF;
END$$

USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`trg_estoque_no_negative` BEFORE UPDATE ON `estoque` FOR EACH ROW
BEGIN
IF NEW.quantidade_disponivel < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: saldo de estoque não pode ser negativo';
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
